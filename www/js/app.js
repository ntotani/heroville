// Generated by CoffeeScript 1.3.1
(function() {
  var Detail, DetailScene, HEIGHT, WIDTH, battleScene, dungeonHeros, dungeonScene, footer, heros, herosPerTeam, herosScene, itemHeight, mapScene, teamSelectScene,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  enchant();

  WIDTH = 320;

  HEIGHT = 480;

  Avatar.prototype.loadImage = function() {
    var code, surface,
      _this = this;
    code = this.getCode().replace(/:/g, '_');
    return surface = enchant.Surface.load('img/' + code + '.gif', function() {
      return _this.image = surface;
    });
  };

  itemHeight = 48;

  herosPerTeam = 4;

  dungeonHeros = [];

  heros = [
    new rpg.Hero.create(Math.random() + '', {
      attack: 15,
      block: 15,
      speed: 15,
      health: 15
    }, {
      attack: 15,
      block: 15,
      speed: 15,
      health: 15
    })
  ];

  heros[0].name = 'ハルヒロ';

  dungeonScene = function() {
    var bg, cancel, commit, depth, label, refreshHeros, scene, team, teamLabel;
    bg = new Sprite(WIDTH, HEIGHT);
    bg.backgroundColor = 'white';
    teamLabel = parseContent('パーティ');
    teamLabel.alignLeftIn(bg, 10).alignTopIn(bg, 10);
    team = new ListView(WIDTH, itemHeight * herosPerTeam);
    team.alignBottomOf(teamLabel);
    refreshHeros = function() {
      var i, listItem, name, _i, _results;
      team.content = [];
      _results = [];
      for (i = _i = 0; 0 <= herosPerTeam ? _i <= herosPerTeam : _i >= herosPerTeam; i = 0 <= herosPerTeam ? ++_i : --_i) {
        name = dungeonHeros[i] ? dungeonHeros[i].name : '';
        listItem = new ListItem(WIDTH, 48, name, null, '>');
        _results.push(team.addChild(listItem));
      }
      return _results;
    };
    refreshHeros();
    team.ontouchstart = function() {
      var nextScene;
      nextScene = teamSelectScene();
      nextScene.onexit = refreshHeros;
      return Core.instance.pushScene(nextScene);
    };
    label = parseContent('目標地点');
    label.alignLeftIn(bg, 10).alignBottomOf(team, 10);
    depth = new InputSelectBox({
      1: '地下1階',
      2: '地下2階',
      3: '地下3階'
    });
    depth.alignRightOf(label).alignBottomOf(team, 5);
    cancel = new Button('戻る');
    cancel.alignLeftIn(bg, 10).alignBottomIn(bg, 10);
    cancel.ontouchstart = function() {
      return Core.instance.popScene();
    };
    commit = new Button('出発');
    commit.alignRightIn(bg, 10).alignBottomIn(bg, 10);
    commit.ontouchstart = function() {
      var result;
      if (dungeonHeros.length < 1) {
        return;
      }
      result = new rpg.Dungeon().solveAuto(dungeonHeros);
      Core.instance.popScene();
      return Core.instance.replaceScene(battleScene(result));
    };
    scene = new Scene;
    scene.addChild(bg);
    scene.addChild(team);
    scene.addChild(teamLabel);
    scene.addChild(label);
    scene.addChild(depth);
    scene.addChild(cancel);
    scene.addChild(commit);
    return scene;
  };

  herosScene = function() {
    var ftr, hdr, listView, scene;
    hdr = new NavigationBar('勇者たち');
    ftr = footer();
    listView = new ListView(WIDTH, HEIGHT - hdr.height - ftr.height);
    listView.y = hdr.height;
    heros.forEach(function(hero) {
      var item;
      item = new ListItem(WIDTH, 48, hero.name, new Avatar('1:2:1:2597:21270:0'));
      item.ontouchend = function() {
        return Core.instance.pushScene(new DetailScene(hero));
      };
      return listView.addChild(item);
    });
    scene = new Scene;
    scene.addChild(hdr);
    scene.addChild(listView);
    scene.addChild(ftr);
    return scene;
  };

  teamSelectScene = function() {
    var back, bg, button, commit, header, herosList, scene, selectedItem, teamList;
    bg = new Sprite(WIDTH, HEIGHT);
    bg.backgroundColor = 'white';
    back = new Button('戻る');
    back.ontouchstart = function() {
      return Core.instance.popScene();
    };
    commit = new Button('決定');
    commit.ontouchstart = function() {
      var e;
      dungeonHeros = (function() {
        var _i, _len, _ref, _results;
        _ref = teamList.content;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          _results.push(e.hero);
        }
        return _results;
      })();
      return Core.instance.popScene();
    };
    header = new NavigationBar('パーティ選択', back, commit);
    teamList = new ListView(WIDTH, itemHeight * herosPerTeam);
    teamList.alignBottomOf(header);
    herosList = new ListView(WIDTH, HEIGHT - header.height - teamList.height);
    herosList.alignBottomOf(teamList);
    selectedItem = null;
    button = new Button('パーティに入れる');
    button.ontouchstart = function() {
      if (selectedItem.inTeam) {
        teamList.removeChild(selectedItem);
        herosList.addChild(selectedItem);
      } else {
        herosList.removeChild(selectedItem);
        teamList.addChild(selectedItem);
      }
      selectedItem.inTeam = !selectedItem.inTeam;
      return Core.instance.popScene();
    };
    heros.forEach(function(hero) {
      var inTeam, item;
      inTeam = dungeonHeros.reduce((function(e, p) {
        return p + (e.id === hero.id ? 1 : 0);
      }), 0);
      item = new ListItem(WIDTH, itemHeight, hero.name, new Avatar('1:2:1:2597:21270:0'));
      item.inTeam = !!inTeam;
      item.hero = hero;
      item.ontouchend = function() {
        button.content = item.inTeam ? 'パーティから外す' : 'パーティに入れる';
        selectedItem = item;
        if (teamList.content.length >= herosPerTeam && !item.inTeam) {
          return Core.instance.pushScene(new DetailScene(hero));
        } else {
          return Core.instance.pushScene(new DetailScene(hero, button));
        }
      };
      return (inTeam ? teamList : herosList).addChild(item);
    });
    scene = new Scene;
    scene.addChild(bg);
    scene.addChild(header);
    scene.addChild(teamList);
    scene.addChild(herosList);
    return scene;
  };

  Detail = (function(_super) {

    __extends(Detail, _super);

    Detail.name = 'Detail';

    function Detail(margin, hero, button) {
      var avatar, close, exp, np;
      EntityGroup.call(this, WIDTH - margin, HEIGHT - margin);
      np = new enchant.widget.Ninepatch(this.width, this.height);
      np.src = Core.instance.assets['dialog.png'];
      avatar = new Avatar('1:2:1:2597:21270:0');
      exp = new Label('exp: ' + hero.effort.attack);
      exp.alignBottomOf(avatar).alignLeftIn(avatar, 10);
      close = new Button('X');
      close.alignRightIn(this, -10).alignTopIn(this, -10);
      close.ontouchstart = function() {
        return Core.instance.popScene();
      };
      margin = 10;
      if (button) {
        button.alignHorizontalCenterIn(this).alignBottomIn(this, margin);
      }
      this.background = np;
      this.addChild(avatar);
      this.addChild(exp);
      this.addChild(close);
      if (button) {
        this.addChild(button);
      }
    }

    return Detail;

  })(EntityGroup);

  DetailScene = (function(_super) {

    __extends(DetailScene, _super);

    DetailScene.name = 'DetailScene';

    function DetailScene(hero, button) {
      var detail, margin;
      Modal.call(this);
      margin = 32;
      detail = new Detail(margin, hero, button);
      detail.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);
      this.addChild(detail);
    }

    return DetailScene;

  })(Modal);

  battleScene = function(result) {
    var act, actor, applyLog, bg, boy, enemy, index, list, log, scene, skill, target, turn, _i, _j, _len, _len1, _ref;
    bg = new AvatarBG(1);
    boy = new Avatar('1:2:1:2597:21270:0');
    boy.y = 48;
    enemy = new Avatar('1:2:1:2597:21270:0');
    enemy.x = WIDTH - 64;
    enemy.y = 48;
    enemy.scaleX = 1;
    list = new ListView(WIDTH, HEIGHT - 176);
    list.y = 176;
    index = 0;
    log = [];
    result = result.battles[0];
    _ref = result.turns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      turn = _ref[_i];
      for (_j = 0, _len1 = turn.length; _j < _len1; _j++) {
        act = turn[_j];
        actor = result.heros.h[act.actor].hero.name;
        target = result.heros.h[act.target].hero.name;
        skill = result.heros.h[act.actor].hero.skills[act.skill].name;
        log.push("" + actor + "の" + skill + "!<br/>" + target + "に" + act.effect + "ダメージ!");
      }
    }
    applyLog = function() {
      var item;
      if (index >= log.length) {
        Core.instance.replaceScene(mapScene());
        return;
      }
      item = new ListItem(WIDTH, 48, log[index]);
      list.addChild(item);
      return index++;
    };
    applyLog();
    scene = new Scene;
    scene.addChild(bg);
    scene.addChild(boy);
    scene.addChild(enemy);
    scene.addChild(list);
    scene.ontouchend = applyLog;
    return scene;
  };

  mapScene = function() {
    var bg, collision, i, j, mapData, scene, treeData, _i, _j;
    mapData = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i < 30; i = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 0; _j < 20; j = ++_j) {
            _results1.push(164);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (j = _i = 8; _i <= 11; j = ++_i) {
      for (i = _j = 13; _j <= 16; i = ++_j) {
        mapData[i][j] = 1;
      }
    }
    treeData = (function() {
      var _k, _results;
      _results = [];
      for (i = _k = 0; _k < 30; i = ++_k) {
        _results.push((function() {
          var _l, _results1;
          _results1 = [];
          for (j = _l = 0; _l < 20; j = ++_l) {
            _results1.push(-1);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    treeData[14][9] = 60;
    treeData[14][10] = 61;
    treeData[15][9] = 76;
    treeData[15][10] = 77;
    collision = (function() {
      var _k, _results;
      _results = [];
      for (i = _k = 0; _k < 30; i = ++_k) {
        _results.push((function() {
          var _l, _results1;
          _results1 = [];
          for (j = _l = 0; _l < 20; j = ++_l) {
            _results1.push(0);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    collision[14][9] = 1;
    collision[14][10] = 1;
    collision[15][9] = 1;
    collision[15][10] = 1;
    bg = new Map(16, 16);
    bg.image = Core.instance.assets['img/map1.png'];
    bg.loadData(mapData, treeData);
    bg.collisionData = collision;
    scene = new Scene;
    scene.ontouchend = function(e) {
      if (bg.hitTest(e.x, e.y)) {
        return Core.instance.pushScene(dungeonScene());
      }
    };
    scene.addChild(bg);
    scene.addChild(footer());
    return scene;
  };

  footer = function() {
    var core, flag, flagIcon, iconMenu, team, teamIcon;
    core = Core.instance;
    flag = new Sprite(32, 32);
    flag.backgroundColor = 'red';
    flagIcon = new Icon(flag, '冒険');
    flagIcon.ontouchend = function() {
      return core.replaceScene(mapScene());
    };
    team = new Sprite(32, 32);
    team.backgroundColor = 'green';
    teamIcon = new Icon(team, 'パーティ');
    teamIcon.ontouchend = function() {
      return core.replaceScene(herosScene());
    };
    iconMenu = new IconMenu([flagIcon, teamIcon]);
    iconMenu.y = HEIGHT - iconMenu.height;
    return iconMenu;
  };

  window.onload = function() {
    var core;
    core = new Core(WIDTH, HEIGHT);
    return core.preload('img/map1.png', 'avatarBg1.png', 'avatarBg2.png', 'avatarBg3.png').start().next(function() {
      return core.pushScene(mapScene());
    });
  };

}).call(this);
